package com.trcolgrove.daoentries;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trcolgrove.daoentries.StoredSet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STORED_SET".
*/
public class StoredSetDao extends AbstractDao<StoredSet, Long> {

    public static final String TABLENAME = "STORED_SET";

    /**
     * Properties of entity StoredSet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uploaded = new Property(1, boolean.class, "uploaded", false, "UPLOADED");
        public final static Property ScoreSetJson = new Property(2, String.class, "scoreSetJson", false, "SCORE_SET_JSON");
    };


    public StoredSetDao(DaoConfig config) {
        super(config);
    }
    
    public StoredSetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORED_SET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"UPLOADED\" INTEGER NOT NULL ," + // 1: uploaded
                "\"SCORE_SET_JSON\" TEXT NOT NULL );"); // 2: scoreSetJson
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORED_SET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoredSet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getUploaded() ? 1L: 0L);
        stmt.bindString(3, entity.getScoreSetJson());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StoredSet readEntity(Cursor cursor, int offset) {
        StoredSet entity = new StoredSet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getShort(offset + 1) != 0, // uploaded
            cursor.getString(offset + 2) // scoreSetJson
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoredSet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUploaded(cursor.getShort(offset + 1) != 0);
        entity.setScoreSetJson(cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StoredSet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StoredSet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
