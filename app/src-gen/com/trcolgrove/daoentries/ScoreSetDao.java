package com.trcolgrove.daoentries;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.trcolgrove.daoentries.ScoreSet;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCORE_SET".
*/
public class ScoreSetDao extends AbstractDao<ScoreSet, Long> {

    public static final String TABLENAME = "SCORE_SET";

    /**
     * Properties of entity ScoreSet.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Difficulty = new Property(1, String.class, "difficulty", false, "DIFFICULTY");
        public final static Property Total_score = new Property(2, int.class, "total_score", false, "TOTAL_SCORE");
        public final static Property Elapsed_time = new Property(3, Long.class, "elapsed_time", false, "ELAPSED_TIME");
        public final static Property Notes_hit = new Property(4, Integer.class, "notes_hit", false, "NOTES_HIT");
        public final static Property Notes_missed = new Property(5, Integer.class, "notes_missed", false, "NOTES_MISSED");
        public final static Property Longest_streak = new Property(6, Integer.class, "longest_streak", false, "LONGEST_STREAK");
        public final static Property Average_streak = new Property(7, Integer.class, "average_streak", false, "AVERAGE_STREAK");
        public final static Property Date = new Property(8, java.util.Date.class, "date", false, "DATE");
    };


    public ScoreSetDao(DaoConfig config) {
        super(config);
    }
    
    public ScoreSetDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCORE_SET\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DIFFICULTY\" TEXT," + // 1: difficulty
                "\"TOTAL_SCORE\" INTEGER NOT NULL ," + // 2: total_score
                "\"ELAPSED_TIME\" INTEGER," + // 3: elapsed_time
                "\"NOTES_HIT\" INTEGER," + // 4: notes_hit
                "\"NOTES_MISSED\" INTEGER," + // 5: notes_missed
                "\"LONGEST_STREAK\" INTEGER," + // 6: longest_streak
                "\"AVERAGE_STREAK\" INTEGER," + // 7: average_streak
                "\"DATE\" INTEGER);"); // 8: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCORE_SET\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScoreSet entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String difficulty = entity.getDifficulty();
        if (difficulty != null) {
            stmt.bindString(2, difficulty);
        }
        stmt.bindLong(3, entity.getTotal_score());
 
        Long elapsed_time = entity.getElapsed_time();
        if (elapsed_time != null) {
            stmt.bindLong(4, elapsed_time);
        }
 
        Integer notes_hit = entity.getNotes_hit();
        if (notes_hit != null) {
            stmt.bindLong(5, notes_hit);
        }
 
        Integer notes_missed = entity.getNotes_missed();
        if (notes_missed != null) {
            stmt.bindLong(6, notes_missed);
        }
 
        Integer longest_streak = entity.getLongest_streak();
        if (longest_streak != null) {
            stmt.bindLong(7, longest_streak);
        }
 
        Integer average_streak = entity.getAverage_streak();
        if (average_streak != null) {
            stmt.bindLong(8, average_streak);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(9, date.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ScoreSet readEntity(Cursor cursor, int offset) {
        ScoreSet entity = new ScoreSet( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // difficulty
            cursor.getInt(offset + 2), // total_score
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // elapsed_time
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // notes_hit
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // notes_missed
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // longest_streak
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // average_streak
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScoreSet entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDifficulty(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTotal_score(cursor.getInt(offset + 2));
        entity.setElapsed_time(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setNotes_hit(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setNotes_missed(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setLongest_streak(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setAverage_streak(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScoreSet entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScoreSet entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
